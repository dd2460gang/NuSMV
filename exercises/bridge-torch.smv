MODULE main
VAR
  location : array 0..3 of boolean;
  traveling: array 0..3 of boolean;
  --speed: array 0..3 of {1, 2, 5, 10};
  torch: boolean;
  time: 0..100;

ASSIGN
  init (location[0]) := FALSE;
  init (location[1]) := FALSE;
  init (location[2]) := FALSE;
  init (location[3]) := FALSE;
  init (traveling[0]) := FALSE;
  init (traveling[1]) := FALSE;
  init (traveling[2]) := FALSE;
  init (traveling[3]) := FALSE;
  init (torch) := FALSE;
  init (time) := 0;

  -- asdhkj sadhkas dsd daskj h
  next (torch) := case
    -- rule: torch can only move if carried
    --count(traveling[0],traveling[1],traveling[2],traveling[3]) >= 1: TRUE;
    --location[0] & location[1] & location[2] & location[3]: TRUE;
    traveling[0]: !location[0];
    traveling[1]: !location[1]; -- gfgd gd fgd
    traveling[2]: !location[2];
    traveling[3]: !location[3];
    TRUE: torch;
  esac;

  next (location[0]) := case
    -- rule: location changes if "0" is traveling
    traveling[0]: !location[0];
    TRUE: location[0];
  esac;

  next (location[1]) := case
    -- copy rule from above and change index
    traveling[1]: !location[1];
    TRUE: location[1];
  esac;

  next (location[2]) := case
    traveling[2]: !location[2];
    TRUE: location[2];
  esac;

  next (location[3]) := case
    traveling[3]: !location[3];
    TRUE: location[3];
  esac;

  next(time) := case
    time > 90: 90;
    traveling[3]: time + 10;
    traveling[2]: time + 5;
    traveling[1]: time + 2;
    traveling[0]: time + 1;
    TRUE: time;
  esac;

LTLSPEC
  !(
      G(count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3)
         & G(traveling[0] -> (location[0] = torch))
         & G(traveling[1] -> (location[1] = torch))
         & G(traveling[2] -> (location[2] = torch))
         & G(traveling[3] -> (location[3] = torch))
     U (count(location[0], location[1], location[2], location[3]) = 4 &
        time <= 17));
  --X count(location[0], location[1], location[2], location[3]) = 4;
