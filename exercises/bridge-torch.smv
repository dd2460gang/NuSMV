MODULE main
VAR
  location : array 0..3 of boolean;
  traveling: array 0..3 of boolean;
  torch: boolean;
  time: 0..100;

ASSIGN
  init (location[0]) := FALSE;
  init (location[1]) := FALSE;
  init (location[2]) := FALSE;
  init (location[3]) := FALSE;
  init (traveling[0]) := FALSE;
  init (traveling[1]) := FALSE;
  init (traveling[2]) := FALSE;
  init (traveling[3]) := FALSE;
  init (torch) := FALSE;
  init (time) := 0;

  -- asdhkj sadhkas dsd daskj h
  next (torch) := case
    -- rule: torch can only move if carried
    traveling[0]: !location[0];
    traveling[1]: !location[1];
    traveling[2]: !location[2];
    traveling[3]: !location[3];
    TRUE: torch;
  esac;

  next (location[0]) := case
    -- rule: location changes if "0" is traveling
    traveling[0]: !location[0];
    TRUE: location[0];
  esac;

  next (location[1]) := case
    -- copy rule from above and change index
    traveling[1]: !location[1];
    TRUE: location[1];
  esac;

  next (location[2]) := case
    traveling[2]: !location[2];
    TRUE: location[2];
  esac;

  next (location[3]) := case
    traveling[3]: !location[3];
    TRUE: location[3];
  esac;

  next(time) := case
    time > 90: 90;
    traveling[3]: time + 10;
    traveling[2]: time + 5;
    traveling[1]: time + 2;
    traveling[0]: time + 1;
    TRUE: time;
  esac;

LTLSPEC
  !(
      G(count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3)
         & G(traveling[0] -> (location[0] = torch))
         & G(traveling[1] -> (location[1] = torch))
         & G(traveling[2] -> (location[2] = torch))
         & G(traveling[3] -> (location[3] = torch))
     U (count(location[0], location[1], location[2], location[3]) = 4 &
        time <= 17));


-- specification !(((( G count(traveling[0], traveling[1], traveling[2], traveling[3]) < 3 &  G (traveling[0] -> location[0] = torch)) &  G (traveling[1] -> location[1] = torch)) &  G (traveling[2] -> location[2] = torch)) & (( G (traveling[3] -> location[3] = torch)) U (count(location[0], location[1], location[2], location[3]) = 4 & time <= 17)))  is false
-- as demonstrated by the following execution sequence
-- Trace Description: LTL Counterexample
-- Trace Type: Counterexample
--   -> State: 1.1 <-
--     location[0] = FALSE
--     location[1] = FALSE
--     location[2] = FALSE
--     location[3] = FALSE
--     traveling[0] = FALSE
--     traveling[1] = FALSE
--     traveling[2] = FALSE
--     traveling[3] = FALSE
--     torch = FALSE
--     time = 0
--   -> State: 1.2 <-
--     traveling[0] = TRUE
--     traveling[1] = TRUE
--   -> State: 1.3 <-
--     location[0] = TRUE
--     location[1] = TRUE
--     traveling[0] = FALSE
--     torch = TRUE
--     time = 2
--   -> State: 1.4 <-
--     location[1] = FALSE
--     traveling[1] = FALSE
--     traveling[2] = TRUE
--     traveling[3] = TRUE
--     torch = FALSE
--     time = 4
--   -> State: 1.5 <-
--     location[2] = TRUE
--     location[3] = TRUE
--     traveling[0] = TRUE
--     traveling[2] = FALSE
--     traveling[3] = FALSE
--     torch = TRUE
--     time = 14
--   -> State: 1.6 <-
--     location[0] = FALSE
--     traveling[1] = TRUE
--     torch = FALSE
--     time = 15
--   -> State: 1.7 <-
--     location[0] = TRUE
--     location[1] = TRUE
--     torch = TRUE
--     time = 17
--   -- Loop starts here
--   -> State: 1.8 <-
--     location[0] = FALSE
--     location[1] = FALSE
--     traveling[0] = FALSE
--     traveling[1] = FALSE
--     torch = FALSE
--     time = 19
--   -> State: 1.9 <-


--The program found a counterexmaple to the negation of the rules. This means that
--there exists a solution in which the total time is at most 17 time units.
--According to the error trace above, the solution looks like this:

-- False          True
--A,B,C,D
--C,D              A,B
--A,C,D            B
--A                C,D,B
--A,B              C,D
--                 A,B,C,D
